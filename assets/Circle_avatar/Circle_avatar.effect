CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs
      frag: unlit-fs
      properties: 
        mainTexture: { value: white }
        wh_ratio: { value: 1.0 }
        blur: { value: 0.35 }
        radius: { value: 0.5 }
        center: { value: [0.5,0.5]}
}%

CCProgram unlit-vs %{
  precision highp float;

  #include <legacy/input-standard>
  #include <builtin/uniforms/cc-global>
  #include <common/common-define>
  #include <builtin/uniforms/cc-local>

  in highp vec3 aa_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif


  void main () {
    vec4 pos = vec4(aa_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%

CCProgram unlit-fs %{
  precision highp float;

  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D mainTexture;
  #endif

  uniform ARGS{
    float radius;
    float blur;
    vec2 center;
    float wh_ratio;
  };

  layout(location = 0) out vec4 fragColor;
  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    o *= texture(mainTexture, v_uv0);
    o *= v_color;

    float circle = radius * radius;
    float rx = center.x * wh_ratio;
    float ry = center.y;
    float dis = (v_uv0.x * wh_ratio - rx) * (v_uv0.x * wh_ratio - rx) + (v_uv0.y  - ry) * (v_uv0.y - ry);

    o.a = smoothstep(circle, circle - blur, dis) * o.a;

    fragColor = o;
  }
}%

